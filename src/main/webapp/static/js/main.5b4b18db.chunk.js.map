{"version":3,"sources":["apiFacade.js","Components/DropZone.js","App.js","serviceWorker.js","index.js"],"names":["facade","startAnalyzation","playername","data","a","options","makeOptions","initiator","fetch","URL","res","json","ok","status","fullError","stopAnalyzation","method","body","opts","headers","JSON","stringify","DropZone","props","state","validFile","processed","loading","encodedData","units","selectedUnit","analyze","bind","file","filename","path","console","log","this","setState","processFile","reader","FileReader","onload","binaryStr","result","base64","encode","unitNames","getAllUnitsFromFile","createUnitSelectItems","readAsText","fileSplit","split","i","length","lineSplit","j","includes","push","filter_list","removeDups","l","filter","x","map","item","key","replace","value","names","unique","forEach","Object","keys","player","evt","persist","target","onDrop","validateFile","getRootProps","getInputProps","className","onChange","changeUnit","disabled","selected","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b4b18db.chunk.js","sourcesContent":["/* eslint-disable no-throw-literal */\r\nconst URL = \"http://161.35.221.47/BGLogger-REST\";\r\n\r\n\r\n\r\nclass ApiFacade {\r\n    //Insert utility-methods from a latter step (d) here\r\n    makeOptions(method, body) {\r\n        var opts = {\r\n            method: method,\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                'Accept': 'application/json',\r\n            }\r\n        }   \r\n        if (body) {\r\n            opts.body = JSON.stringify(body);\r\n        }\r\n        return opts;\r\n    }\r\n\r\n    startAnalyzation = async (playername, data) => {\r\n        const options = this.makeOptions(\"POST\",  { initiator: playername, data: data});\r\n        const res = await fetch(URL+\"/api/analyze/postlog\", options)\r\n        const json = await res.json();\r\n        if (!res.ok) {\r\n            throw { status: res.status, fullError: json }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    stopAnalyzation = async () => {\r\n        const options = this.makeOptions(\"POST\", true);\r\n        const res = await fetch(\"/api/backtest/stop\", options)\r\n        const json = await res.json();\r\n        if (!res.ok) {\r\n            throw { status: res.status, fullError: json }\r\n        }\r\n        return json;\r\n    }\r\n}\r\n\r\nconst facade = new ApiFacade();\r\n\r\nexport default facade;\r\n","import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport base64 from 'react-native-base64'\r\nimport facade from '../apiFacade'\r\n\r\n\r\nclass DropZone extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            validFile: false,\r\n            processed: false,\r\n            loading: false,\r\n            encodedData: '',\r\n            units: [],\r\n            selectedUnit: '',\r\n        }\r\n        this.analyze = this.analyze.bind(this)\r\n    }\r\n\r\n    validateFile(file) {\r\n        const filename = file[0].path\r\n        console.log(file[0].path)\r\n        if (filename === 'WoWCombatLog.txt') {\r\n            this.setState({\r\n                processed: false,\r\n                validFile: filename === 'WoWCombatLog.txt'\r\n            })\r\n        }\r\n        else {\r\n            console.log('invalid file')\r\n        }\r\n        this.processFile(file[0])\r\n    }\r\n\r\n    async processFile(file) {\r\n        if (this.state.validFile) {\r\n\r\n            const reader = new FileReader()\r\n            reader.onload = async () => {\r\n                const binaryStr = reader.result\r\n                const encodedData = base64.encode(binaryStr)\r\n                var unitNames = this.getAllUnitsFromFile(binaryStr)\r\n                this.setState({\r\n                    encodedData: encodedData,\r\n                    units: unitNames,\r\n                    processed: true\r\n                })\r\n                this.createUnitSelectItems()\r\n            }\r\n            reader.readAsText(file)\r\n        }\r\n    }\r\n\r\n    getAllUnitsFromFile(file) {\r\n\r\n        var units = []\r\n        var fileSplit = file.split('\\n')\r\n        for (var i = 1; i < fileSplit.length; i++) {\r\n            var lineSplit = fileSplit[i].split(',')\r\n            for (var j = 0; j < lineSplit.length; j++) {\r\n                if (lineSplit[j].includes('Player')) {\r\n                    if (lineSplit[j + 1].includes)\r\n                        units.push(lineSplit[j + 1])\r\n                }\r\n            }\r\n\r\n        }\r\n        return this.filter_list(this.removeDups(units))\r\n    }\r\n\r\n    filter_list(l) {\r\n        return l.filter(x => x.includes('-'));\r\n    }\r\n\r\n    createUnitSelectItems() {\r\n        let units = this.state.units.map(item => {\r\n            return (<option key={item.replace('\\\"', '')} value={item.replace('\\\"', '')}>{item.replace('\\\"', '').replace('\\\"', '')}</option>)\r\n        })\r\n        this.setState({\r\n            units: units\r\n        })\r\n    }\r\n\r\n    removeDups(names) {\r\n        let unique = {};\r\n        names.forEach(function (i) {\r\n            if (!unique[i]) {\r\n                unique[i] = true;\r\n            }\r\n        });\r\n        return Object.keys(unique);\r\n    }\r\n\r\n    async analyze(player, data) {\r\n        var res = await facade.startAnalyzation(player, data)\r\n        console.log(res)\r\n    }\r\n\r\n    changeUnit(evt) {\r\n        evt.persist()\r\n        this.setState({\r\n            selectedUnit: evt.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Dropzone onDrop={file => this.validateFile(file)}>\r\n                    {({ getRootProps, getInputProps }) => (\r\n                        <section>\r\n                            <div {...getRootProps()}>\r\n                                <input {...getInputProps()} />\r\n                                <p>Drag 'n' drop your CombatLog.txt here, or click to browse file</p>\r\n                            </div>\r\n                        </section>\r\n                    )}\r\n                </Dropzone>\r\n                {this.state.processed ? (\r\n                    <div>\r\n                        <div className=\"unit-container\">\r\n                            <select className=\"unit-select\" onChange={(evt) => this.changeUnit(evt)}>\r\n                                <option value=\"\" disabled selected>Select player</option>\r\n                                {this.state.units}\r\n                            </select>\r\n                        </div>\r\n                        {this.state.selectedUnit.length > 0 ? (<button onClick={(evt) => this.analyze(this.state.selectedUnit, this.state.encodedData)}>Analyze</button>) : (<div></div>)}\r\n                    </div>\r\n                ) : (<div></div>)}\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default DropZone;","import React from 'react';\nimport './App.css';\nimport DropZone from './Components/DropZone'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DropZone />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}